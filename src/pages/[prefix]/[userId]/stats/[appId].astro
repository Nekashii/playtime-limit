---
import type { UserGameStats } from '../../../../models/user-game-stats.model'
import '../../../../styles/global.css'
import type { UserStatus } from '../../../../types/user-status.type'

export const prerender = false

const { prefix, userId, appId } = Astro.params

const res = await fetch(`${Astro.locals.runtime.env.STEAM_API_URL}/${prefix}/${userId}/stats/${appId}`)
if (res.status === 404) return new Response(undefined, { status: 404 })
if (res.status === 401) return Astro.rewrite('/401')

const { user, app } = (await res.json()) as UserGameStats

const [outerGradient, innerGradient] = (
  {
    'offline': [
      'linear-gradient( to bottom, rgba(106,106,106,1) 5%, rgba(85,85,85,1) 95%)',
      'linear-gradient( to bottom, #515151 5%, #474747 95%)',
    ],
    'online': [
      'linear-gradient( to bottom, rgba(83,164,196,1) 5%, rgba(69,128,151,1) 95%)',
      'linear-gradient( to bottom, #41778f 5%, #3d697b 95%)',
    ],
    'in-game': [
      'linear-gradient( to bottom, rgba(143,185,59,1) 5%, rgba(110,140,49,1) 95%)',
      'linear-gradient( to bottom, #66812e 5%, #59702b 95%)',
    ],
  } satisfies Record<UserStatus, [string, string]>
)[user.status]

const title = `${app.name} - ${user.profileName} - Tiempo de juego`
const description = `Seguimiento de tiempo de juego en ${app.name} para ${user.profileName}`
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <link rel="shortcut icon" href="/favicon.svg" type="svg+xml" />

    <!-- Robots -->
    <meta name="robots" content="noindex, nofollow" />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content="Nekashii" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
  </head>
  <body
    class="bg-[#1b2838] flex flex-col items-center justify-center w-full overflow-y-auto min-h-dvh text-white text-xs leading-[calc(17/12)] p-2.5 gap-4.5"
  >
    <div class="flex gap-4.5 items-center">
      <div class="relative p-0.25 shrink-0" style={`background: ${outerGradient}`}>
        <img
          class="h-16.5 w-16.5 p-0.25 object-cover"
          style={`background: ${innerGradient}`}
          src={user.avatar}
          alt=`avatar de ${user.profileName}`
        />
        {
          user.avatarFrame ? (
            <img
              class="h-16 w-16 object-cover absolute top-1/2 left-1/2 -translate-1/2 scale-[1.225]"
              src={user.avatarFrame}
              alt={`marco de ${user.profileName}`}
            />
          ) : undefined
        }
      </div>
      <h1 class="text-[#EBEBEB] text-[26px]">{user.profileName}</h1>
    </div>
    <div class="bg-black/20 p-2.5 gap-2.5 grid grid-cols-[auto_1fr] items-start text-[rgb(184_188_191_/_80%)] w-full max-w-160">
      <picture>
        <source media="(min-width: 48rem)" srcset={app.coverLandscape} />
        <img class="h-41 md:h-30" src={app.coverPortrait} alt="" />
      </picture>
      <div class="gap-x-2.5 gap-y-3.5 grid grid-cols-[1fr_1fr] auto-rows-auto">
        <h2 class="col-span-2 text-[17px] text-white">{app.name}</h2>
        <div class="col-span-2 md:col-span-1">
          <h3 class="uppercase font-bold">Tiempo total de juego</h3>
          <p>{app.playtimeForever} hora{app.playtimeForever !== 1 ? 's' : ''}</p>
        </div>
        <div class="col-span-2 md:col-span-1">
          <h3 class="uppercase font-bold">Ãšltimas 2 semanas</h3>
          <p>{app.playtime2weeks} hora{app.playtime2weeks !== 1 ? 's' : ''}</p>
        </div>
        {
          app.playtimeMonth ? (
            app.playtimeLimit ? (
              <div class="col-span-2 flex flex-col gap-1.5">
                <div class="flex justify-between gap-2.5">
                  <h3 class="uppercase font-bold">Horas jugadas en el mes</h3>
                  <p>
                    {app.playtimeMonth}/{app.playtimeLimit}
                  </p>
                </div>
                <div class="bg-[#B8BCBF] h-1.5 rounded-xs overflow-hidden">
                  <div
                    class="h-full"
                    style={`background-color: #${app.playtimeMonth >= app.playtimeLimit ? 'C02942' : '1A9FFF'}; width: ${(app.playtimeMonth / app.playtimeLimit) * 100}%`}
                  />
                </div>
              </div>
            ) : (
              <div class="col-span-2 md:col-span-1">
                <h3 class="uppercase font-bold">Horas jugadas en el mes</h3>
                <p>{app.playtimeMonth}</p>
              </div>
            )
          ) : undefined
        }
      </div>
    </div>
  </body>
</html>
